Example device names when on "receive" mode:


xx:xx:xx:A7:6B:16

IzdJOVL8n14AAAAAAAAAIyLe0ocONEH3GtJSL-NuRXJZEVRlbGVmb25lIGRlIERpb2dv
IzdJOVL8n14AAAAAAAAAIyKp4M61YgF3ZRkxBoJ60L_ZEVRlbGVmb25lIGRlIERpb2dv


xx:xx:xx:3C:07:8B

IzlRSkT8n14AAAAAAAAAFwLgZfG9UTrDaojDIMFJjCtcBU1pIEEx
IzlRSkT8n14AAAAAAAAAFwIO4-okxaSu3o5taaa7cYF7BU1pIEEx
IzlRSkT8n14AAAAAAAAAFwLikXM7S-M1GDWPisM-4C5XBU1pIEEx
I0NYVkT8n14AAAAAAAAAFwLnjMrL1sRqoQaiDR6iA-4mBU1pIEEx
I0NYVkT8n14AAAAAAAAAFwIkztTpNPxEd3h7nbokY-_WBU1pIEEx
I1owMDb8n14AAAAAAAAAFwKJQzA45dCrRjN21kn19Vh5BU1pIEEx

Decode with URLBase64

----------

byte 0 :        1 BYTE 3bit version + 5 bit PCP
byte 1-5 :      4 bytes endpoint ID
byte 6-9 :      3 bytes service ID hash
byte 10 :       1 byte WebRTC state
byte 11-16:     6 bytes reserved
byte 17 :       1 byte lenght endpoint info
byte 18-32:     remaining endpoint info
byte 33:        Device name length

-----------

From connections/implementation/pcp.h on google's nearby repo:

// The PreConnectionProtocol (PCP) defines the combinations of interactions
// between the techniques (ultrasound audio, Bluetooth device names, BLE
// advertisements) used for offline Advertisement + Discovery, and identifies
// the steps to go through on each device.

PCP values:
  kUnknown = 0,
  kP2pStar = 1,
  kP2pCluster = 2,
  kP2pPointToPoint = 3

PCP is not clear, in case of google's implementation of nearby share for files seems to always be P2P, other applications may use other modes

-----------

Endpoint ID seems to change on every boot or when disabling and reenabling nearby share

-----------

Service ID appears to be attached to the application using the nearby protocol, in case of android's nearby share, this value is FC 9F 5E
core.h states:

// service_id - An identifier to advertise your app to other endpoints.
  //              This can be an arbitrary string, so long as it uniquely
  //              identifies your service. A good default is to use your
  //              app's package name.

This should be the package name, but trying to sha256 either the files app (which seems to be what provides the implementation of file transfer over the nearby protocol) or the nearby package from play services doesn't return this

For this simple implementation, the service ID should not be relevant as we would be accepting any stream of data

-----------

WebRTC might be for implementations where both devices are already on the same network, in this case, 0 because the phones were not connected to a network

-----------

Endpoint info may have some sort of authentication/encryption keys, couldn't find any reference to it yet

-----------

34th byte is the length of the device name
